openapi: 3.0.0
info:
  title: Travelbud API
  version: '1.0'
  description: ''
servers:
  - url: 'https://sps-travelbud.appspot.com'
  - url: 'http://localhost:8080'
paths:
  /api/countries:
    get:
      summary: ListCountries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
              examples:
                example-1:
                  value:
                    - id: 1
                      name: Denmark
                      cultureDos:
                        - Shake hands with women first
                        - Speak in a moderate tone
                        - Communicate very directly in any conversation
                      cultureDonts:
                        - Try not to attract attention
                      languages: Danish
                    - id: 2
                      name: South Korea
                      cultureDos:
                        - Always bow to individuals when departing
                        - Handshakes often accompany the bow among men
                        - Communicate very directly in any conversation
                      cultureDonts:
                        - Do not use excessive or overt body language
                      languages: Korean
      operationId: get-api-countries
      description: 'This GET request returns an object array of all the entries in the entity “Country”. This can be used in the search page, where customers are looking for places to travel.'
      tags:
        - Countries
    post:
      summary: CreateCountry
      tags:
        - Countries
      responses: {}
      operationId: post-api-countries
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
        description: A form with all the properties/values of the country.
      description: This POST request adds entries to the backend. This is useful for wanting to add more countries to the entity “Country”.
  '/api/countries/{countryID}':
    parameters:
      - schema:
          type: string
        name: countryID
        in: path
        required: true
    get:
      summary: GETCountry
      tags:
        - Countries
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
              examples:
                example-1:
                  value:
                    id: 1
                    name: Denmark
                    cultureDos:
                      - Shake hands with women first
                      - Speak in a moderate tone
                      - Communicate very directly in any conversation
                    cultureDonts:
                      - Try not to attract attention
                    languages: Danish
        '404':
          description: Not Found
      operationId: get-countries-countryID
      description: This GET request returns a JSON of the “Country” Entity. This can be used for fetching data on a specific country(Language/cultureNorms).
    put:
      summary: UpdateCountry
      tags:
        - Countries
      responses: {}
      operationId: put-countries-countryID
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
        description: A form with all the properties/values of the Country.
      description: This PUT request updates entries to the backend. This is useful for wanting to change a property of a specific country.
  /api/cities:
    get:
      summary: ListCities
      tags:
        - Cities
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
              examples:
                example-1:
                  value:
                    - id: 1
                      name: Copenhagen
                      countryId: 1
                      description: Some cool Copenhagen description
                      location: some location
                      travelPrice: 54.4
                      events: []
                    - id: 2
                      name: Busan
                      countryId: 2
                      description: Some cool Busan description
                      location: some location
                      travelPrice: 52.4
                      events: []
      operationId: get-cities
      description: This GET request returns an object array of all the entries in the entity “City”. This can be useful in finding the list of cities we have in the application.
    post:
      summary: CreateCity
      tags:
        - Cities
      responses: {}
      operationId: post-cities
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/City'
            examples: {}
        description: a form with all the properties/values of the city.
      description: This POST request adds entries to the backend. This is useful for wanting to add more cities to the entity “City”.
    parameters: []
  '/api/cities/{cityID}':
    parameters:
      - schema:
          type: string
        name: cityID
        in: path
        required: true
    get:
      summary: GetCity
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
              examples:
                example-1:
                  value:
                    id: 1
                    name: Copenhagen
                    countryId: 1
                    description: Some cool Copenhagen description
                    location: some location
                    travelPrice: 54.4
                    events: []
        '404':
          description: Not Found
      operationId: get-api-cities-cityID
      description: 'This GET request returns an object array of all the entries in the entity “City”. This can be used for fetching data on a specific city (List of events, location, country, etc.).'
      tags:
        - Cities
    put:
      summary: UpdateCity
      responses: {}
      operationId: put-api-cities-cityID
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/City'
            examples: {}
        description: a form with all the properties/values of the City.
      description: This PUT request updates entries to the backend.This is useful for wanting to change a property of a specific City.
      tags:
        - Cities
  /api/events:
    get:
      summary: ListEvents
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                uniqueItems: false
                items:
                  $ref: '#/components/schemas/Event'
      operationId: get-api-events
      description: This GET request returns an object array of all the entries in the entity “Event”. This can be useful in finding the list of events we have in the application.
    post:
      summary: CreateEvent
      tags:
        - Events
      responses: {}
      operationId: post-api-events
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
        description: a form with all the properties/values of the Event.
      description: This POST request adds entries to the backend.This is useful for wanting to add more events to the entity “Event”.
  '/api/events/{eventID}':
    parameters:
      - schema:
          type: string
        name: eventID
        in: path
        required: true
    get:
      summary: GetEvent
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Not Found
      operationId: get-api-events-eventID
      description: This GET request returns an object array of all the entries in the entity “Events”.This can be used for fetching data on a specific .
    put:
      summary: UpdateEvent
      tags:
        - Events
      operationId: put-api-events-eventID
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
        description: a form with all the properties/values of the event.
      description: This PUT request updates entries to the backend.This is useful for wanting to change a property of a specific event..
  /search:
    get:
      summary: GetSearchResults
      tags:
        - Search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchResult'
              examples:
                example-results:
                  value:
                    - name: New England
                      type: Country
                      id: 45
                      description: something
                    - name: New York
                      type: City
                      id: 455
                      description: something
      operationId: get-search
      parameters:
        - schema:
            type: string
          in: query
          name: name
          description: The name to search for among countries and cities
components:
  schemas:
    Country:
      title: Country
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        cultureDos:
          type: array
          items:
            type: string
        cultureDonts:
          type: array
          items:
            type: string
        languages:
          type: string
      x-examples:
        South Korea:
          id: 2
          name: South Korea
          cultureDos:
            - Always bow to individuals when departing
            - Handshakes often accompany the bow among men
            - Communicate very directly in any conversation
          cultureDonts:
            - Do not use excessive or overt body language
          languages: Korean
        Denmark:
          id: 1
          name: Denmark
          cultureDos:
            - Shake hands with women first
            - Speak in a moderate tone
            - Communicate very directly in any conversation
          cultureDonts:
            - Try not to attract attention
          languages: Danish
      x-tags:
        - Countries
      description: ''
    City:
      title: City
      type: object
      x-examples:
        Busan:
          id: 2
          name: Busan
          countryId: 2
          description: Some cool Busan description
          events: []
        Copenhagen:
          id: 1
          name: Copenhagen
          countryId: 1
          description: Some cool Copenhagen description
          events: []
      x-tags:
        - Cities
      properties:
        id:
          type: integer
        name:
          type: string
        countryId:
          type: string
        description:
          type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
      required:
        - id
        - name
        - countryId
      description: ''
    Event:
      title: Event
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        date:
          type: string
          format: date-time
        location:
          type: string
        pricing:
          type: number
        description:
          type: string
      x-examples:
        Ecstatic Dance:
          id: 1
          name: Ecstatic Dance
          cityId: 1
          description: Some dancing description
          date: '2020-04-04 16:45:00 UTC'
          location: 's4 Æbeløgade, 2100 København, Denmark'
          pricing: 22
        Busan International Boat Show:
          id: 2
          name: Busan International Boat Show
          cityId: 2
          description: Some boat show description
          date: '2020-05-21 03:00:00 UTC'
          location: '84 Haeundaehaebyeon-ro, U-dong, Haeundae-gu, Busan, South Korea'
          pricing: 0.5
      x-tags:
        - Events
    SearchResult:
      title: SearchResult
      type: object
      x-tags:
        - Search
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - Country
            - City
      x-examples:
        example-1:
          name: Sudan
          type: Country
          id: 45
          description: something
  securitySchemes: {}
