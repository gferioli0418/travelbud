openapi: 3.0.0
info:
  title: Travelbud API
  version: '1.0'
  description: ''
servers:
  - url: 'http://localhost:8080'
  - url: 'https://sps-travelbud.appspot.com'
paths:
  /api/countries:
    get:
      summary: ListCountries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
      operationId: get-api-countries
      description: 'This GET request returns an object array of all the entries in the entity “Country”. This can be used in the search page, where customers are looking for places to travel.'
      tags:
        - Countries
    post:
      summary: CreateCountry
      tags:
        - Countries
      responses: {}
      operationId: post-api-countries
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
        description: a form with all the properties/values of the country.
      description: This POST request adds entries to the backend.This is useful for wanting to add more countries to the entity “Country”.
  '/api/countries/{countryID}':
    parameters:
      - schema:
          type: string
        name: countryID
        in: path
        required: true
    get:
      summary: GetCountry
      tags:
        - Countries
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
      operationId: get-countries-countryID
      description: This GET request returns a JSON of the “Country” Entity. This can be used for fetching data on a specific country(Language/cultureNorms).
    put:
      summary: UpdateCountry
      tags:
        - Countries
      responses: {}
      operationId: put-countries-countryID
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
        description: a form with all the properties/values of the Country.
      description: This PUT request updates entries to the backend.This is useful for wanting to change a property of a specific country.
  /api/cities:
    get:
      summary: ListCities
      tags:
        - Cities
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
      operationId: get-cities
      description: This GET request returns an object array of all the entries in the entity “City”. This can be useful in finding the list of cities we have in the application.
    post:
      summary: CreateCity
      tags:
        - Cities
      responses: {}
      operationId: post-cities
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/City'
        description: a form with all the properties/values of the city.
      description: This POST request adds entries to the backend.This is useful for wanting to add more cities to the entity “City”.
    parameters: []
  '/api/cities/{cityID}':
    parameters:
      - schema:
          type: string
        name: cityID
        in: path
        required: true
    get:
      summary: GetCity
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
      operationId: get-api-cities-cityID
      description: 'This GET request returns an object array of all the entries in the entity “City”.This can be used for fetching data on a specific city (List of events, location, country, etc.).'
      tags:
        - Cities
    put:
      summary: UpdateCity
      responses: {}
      operationId: put-api-cities-cityID
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/City'
            examples:
              example-1: {}
        description: a form with all the properties/values of the City.
      description: This PUT request updates entries to the backend.This is useful for wanting to change a property of a specific City.
      tags:
        - Cities
  /api/events:
    get:
      summary: ListEvents
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
      operationId: get-api-events
      description: This GET request returns an object array of all the entries in the entity “Event”. This can be useful in finding the list of events we have in the application.
    post:
      summary: CreateEvent
      tags:
        - Events
      responses: {}
      operationId: post-api-events
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
        description: a form with all the properties/values of the Event.
      description: This POST request adds entries to the backend.This is useful for wanting to add more events to the entity “Event”.
  '/api/events/{eventID}':
    parameters:
      - schema:
          type: string
        name: eventID
        in: path
        required: true
    get:
      summary: GetEvent
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      operationId: get-api-events-eventID
      description: This GET request returns an object array of all the entries in the entity “Events”.This can be used for fetching data on a specific .
    put:
      summary: UpdateEvent
      tags:
        - Events
      operationId: put-api-events-eventID
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
        description: a form with all the properties/values of the event.
      description: This PUT request updates entries to the backend.This is useful for wanting to change a property of a specific event..
components:
  schemas:
    Country:
      title: Country
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        cultureDos:
          type: array
          items:
            type: string
        cultureDonts:
          type: array
          items:
            type: string
        languages:
          type: string
      x-examples:
        example-1:
          id: 23
          name: Country Name
          cultureDos:
            - do x
            - do y
            - do z
          cultureDonts:
            - "don't x"
            - "don't y"
            - "don't z"
          languages: language(s)
      x-tags:
        - Countries
    City:
      title: City
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        countryId:
          type: string
        location:
          type: string
        description:
          type: string
        travelPrice:
          type: number
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
      x-examples:
        example-1:
          id: 54
          name: City Name
          countryId: 23
          description: beautiful city located in western side of country
          location: some location
          travelPrice: 54.4
          events: []
      x-tags:
        - Cities
    Event:
      title: Event
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        date:
          type: string
          format: date-time
        location:
          type: string
        pricing:
          type: number
        description:
          type: string
      x-examples:
        example-1:
          id: 54
          name: Event Name
          cityId: 23
          description: "annual St. Patrick's parade"
          date: '2020-07-02 11:00:00 UCT'
          location: some location
          pricing: 13.44
      x-tags:
        - Events
  securitySchemes: {}
